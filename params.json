{"name":"Jalangi-berkeley","tagline":"Doing research on top of Jalangi","body":"Jalangi\r\n=======\r\n\r\n*Quick links:*\r\n * [JITProf v1.1](https://github.com/Berkeley-Correctness-Group/JITProf), [JITProf v1.0](https://github.com/Berkeley-Correctness-Group/Jalangi-Berkeley/tree/master/src/js/analyses/jitaware)\r\n * [TypeDevil](https://github.com/Berkeley-Correctness-Group/Jalangi-Berkeley/tree/master/src/js/analyses/inconsistentType)\r\n\r\n\r\n### Introduction\r\n\r\nThis repository is set up for doing researching on top of Jalangi, which is a dynamic analysis framework for JavaScript.\r\n\r\nMore more details please visit jalangi master branch:\r\nhttps://github.com/SRA-SiliconValley/jalangi\r\n\r\nOr visit the project website:\r\nhttps://www.eecs.berkeley.edu/~gongliang13/jalangi_ff/\r\n\r\n### Requirements\r\n\r\nWe tested Jalangi on Mac OS X 10.8 with the Chromium browser and on Ubuntu 12.04 with both the Chromium and the Firefox browsers.  Jalangi should work on Mac OS 10.7, Ubuntu 11.0 and higher and Windows 7 or higher. Jalangi will NOT work with Internet Explorer.\r\n\r\n  * Latest version of Node.js available at http://nodejs.org/.  We have tested Jalangi with Node v0.8.22 and v0.10.3.\r\n  * Sun's JDK 1.6 or higher.  We have tested Jalangi with Java 1.6.0_43.\r\n  * Command-line git.\r\n  * libgmp (http://gmplib.org/) is required by cvc3.  Concolic testing uses cvc3 and automaton.jar for constraint solving. The installation script checks if cvc3 and automaton.jar are installed properly.\r\n  * Chrome browser if you need to test web apps.\r\n  * Python (http://python.org) version 2.7 or higher\r\n  \r\nOn Windows you need the following extra dependencies:\r\n\r\n  * Install Microsoft Visual Studio 2010 (Free express version is fine).\r\n  * If on 64bit also install Windows 7 64-bit SDK.\r\n\r\nIf you have a fresh installation of Ubuntu, you can install all the requirements by invoking the following commands from a terminal.\r\n\r\n    sudo apt-get update\r\n    sudo apt-get install python-software-properties python g++ make\r\n    sudo add-apt-repository ppa:chris-lea/node.js\r\n    sudo apt-get update\r\n    sudo apt-get install nodejs\r\n    sudo add-apt-repository ppa:webupd8team/java\r\n    sudo apt-get update\r\n    sudo apt-get install oracle-java7-installer\r\n    sudo update-java-alternatives -s java-7-oracle\r\n    sudo apt-get install git\r\n    sudo apt-get install libgmp10\r\n    sudo apt-get install chromium-browser\r\n\r\n### Installation\r\n\r\nIn the root dir of the repository:\r\n```\r\nnode src/js/commands/install.js\r\n```\r\nif your current working dir is ```[parent-dir] / [cur-dir]``` then it will check and create a directory ```[parent-dir] / [jalangi]``` where the master branch of Jalangi will be cloned and installed.\r\n\r\nIf Installation succeeds, you should see the following message:\r\n```\r\n---> Installation successful.\r\n---> run 'npm test' to make sure all tests pass\r\n```\r\nto run test, type:\r\n```\r\ncd ../jalangi\r\nnpm test\r\n```\r\n### Run Experiments\r\nIn the Jalangi-Berkeley directory:\r\n```\r\npython <Jalangi root path>/jalangi/scripts/jalangi.py direct -a <analysis code file> <program to be instrumented>\r\n```\r\nAll files paths should be relative path to the root directory of this repository.\r\n\r\nFor example, to find JIT-unfriendly code using JITProf:\r\n```\r\npython ../jalangi/scripts/jalangi.py direct --analysis ../jalangi/src/js/analyses/ChainedAnalyses.js --analysis src/js/analyses/jitaware/chaining/utils/Utils.js --analysis src/js/analyses/jitaware/chaining/utils/RuntimeDB.js --analysis src/js/analyses/jitaware/chaining/TrackHiddenClass --analysis src/js/analyses/jitaware/chaining/AccessUndefArrayElem --analysis src/js/analyses/jitaware/chaining/SwitchArrayType --analysis src/js/analyses/jitaware/chaining/NonContiguousArray --analysis src/js/analyses/jitaware/chaining/InitFieldOutsideConstructor --analysis src/js/analyses/jitaware/chaining/BinaryOpOnUndef --analysis src/js/analyses/jitaware/chaining/PolymorphicFunCall --analysis src/js/analyses/jitaware/chaining/ArgumentsLeak --analysis src/js/analyses/jitaware/chaining/TypedArray tests/jitaware/JITAwareTest\r\n```\r\n\r\nTo run an analysis to find inconsistent types:\r\n```\r\npython ../jalangi/scripts/jalangi.py direct -a src/js/analyses/inconsistentType/InconsistentTypeEngine.js tests/inconsistentType/inconsistent1\r\n```\r\n\r\nTo run an analysis to find arrays that can be cast to typed arrays:\r\n```\r\npython ../jalangi/scripts/jalangi.py direct -a src/js/analyses/jitaware/fixArray tests/jitaware/arrayTypeTest\r\n```\r\n\r\nTo run single file version of JITProf (outdated):\r\n```\r\npython ../jalangi/scripts/jalangi.py direct -a src/js/analyses/jitaware/JITAware tests/jitaware/JITAwareTest\r\n```\r\n\r\n### Run Browser Experiments\r\n\r\nFor now, this experiment only supports Firefox and Chrome on Mac OS.\r\nTo automated the web testing, selenium is needed, to install selenium type the following command in the terminal:\r\n```\r\nnpm install selenium-webdriver\r\nnpm install mocha selenium-webdriver\r\n```\r\nCurrently ```install.js``` automatically installs for MacOS. So if you are using a non-Mac OS, you also need to download and install chromedriver by yourself at the following link:\r\n```\r\nhttps://code.google.com/p/selenium/wiki/ChromeDriver\r\n```\r\n\r\nBefore running the experiment on Mac OS:\r\n  * close your firefox and chrome instances\r\n  * configure your firefox so that it will dump output to the native console:\r\n    in the browser url input box type: ```about:config```\r\n    search for: ```brwoser.dom.window.dump.enabled```, set it to ```true```\r\n\r\nIn the Jalangi-Berkeley directory type the following command:\r\n```\r\nnode src/js/commands/benchmark_exp.js\r\n```\r\nfinally after the experiment finished, open the file ```Jalangi-Berkeley/exp_output/result.csv``` using Excel.\r\n\r\n### In-browser Instrumentation (instrumentFF)\r\n\r\nAs an alternative to instrumenting JavaScript files on the file system, you can instrument JavaScript on the fly in the Firefox browser, using ```instrumentFF```. This setup enables you to easily analyze arbitrary web applications. ```instrumentFF``` will instrument all JavaScript code executed by Firefox, including code given to ```eval()```.\r\n\r\n  * Install our custom version of Firefox:\r\n    * [Linux (64 bit)](http://mp.binaervarianz.de/jalangi/firefox-jalangi-27.0a1.en-US.linux-x86_64_20140815.tar.bz2) (recommended)\r\n    * [Mac OS (64 bit)](http://mp.binaervarianz.de/jalangi/firefox-jalangi-27.0a1.en-US.mac64_20140520.dmg) (has [this bug](https://github.com/Berkeley-Correctness-Group/Jalangi-Berkeley/issues/3) related to script-inserted scripts)\r\n    * Build it yourself by applying [this patch](http://mp.binaervarianz.de/jalangi/firefox_jalangi_20140815.diff) against revision c6fc35c53c37 of the [Mozilla code base](https://hg.mozilla.org/mozilla-central)\r\n  * Add instrumentFF to your PATH environment variable:\r\n    ```export PATH=\"/Your/path/to/Jalangi-Berkeley/scripts/path_unix\":$PATH```\r\n  * Edit ```scripts/instrumentFF.py```:\r\n    * Modify the variable ```jalangiAnalysisFiles``` to specify the Jalangi analyses that you want to run (an array of file names).\r\n    * Modify the variable ```included``` to specify the URLs for which to instrument JavaScript files (an array of regular expressions).\r\n    * Set the variable '''preprocess''' to '''False''' (unless you're running the inconsistentTypes analysis).\r\n  * Start the custom version of Firefox. Make sure that your current working directory is Jalangi-Berkeley.\r\n\r\nFirefox will write the uninstrumented .js files and the instrumented .js files to ```instrumentFF_tmp```, along with the sourcemaps produced by the Jalangi instrumenter. ```instrumentFF``` caches instrumented files to avoid unnecessarily re-instrumenting files. If you modify your analysis, empty the cache by removing all files in ```instrumentFF_tmp``` and by restarting Firefox.\r\n\r\n### JITProf: Pinpointing JIT-unfriendly JavaScript Code\r\n\r\nThe JITProf source code and project README is available at:\r\n\r\nhttps://github.com/Berkeley-Correctness-Group/Jalangi-Berkeley/tree/master/src/js/analyses/jitaware\r\n\r\nThe technical report is available at:\r\n\r\nhttp://www.eecs.berkeley.edu/Pubs/TechRpts/2014/EECS-2014-144.html\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}